<%- include('../components/template') %>
<main id="content">
    <div id="nodeForm" class="mt-6 px-8 w-full grid grid-cols-2 gap-4">
        <div class="p-3 bg-transparent shadow-xl border border-white/5 rounded-xl overflow-hidden sm:p-6 lg:p-10 card" style="width: 800px;">
            <form>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.name %>:</label>
                        <input id="name" value="<%= instance.Name %>" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="My instance">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.user %>:</label>
                        <select style="background: #171717;" id="user" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5">
                            <% users.forEach(function(user) { %>
                                <option value="<%= instance.User %>"><%= user.username %></option>
                            <% }); %>
                        </select>
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Image:</label>
                        <select style="background: #171717;" id="image" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5">
                            <% images.forEach(function(image) { %>
                                <option data-configfilepath="<%= image.ConfigFilePath %>" data-configfilecontent="<%= image.ConfigFileContent %>"><%= image.Name %> (<%= image.Image %>)</option>
                            <% }); %>
                        </select>
                    </div>
    
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Memory (MiB):</label>
                        <input value="<%= instance.Memory %>" type="number" id="memory" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="2048">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">CPU Threads:</label>
                        <input value="<%= instance.Cpu %>" id="cpu" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="1">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Ports:</label>
                        <input value="<%= instance.Ports %>" id="ports" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="25565:25565,8080:8080">
                    </div>
    
                    <div>
                        <label class="text-neutral-400 text-sm tracking-tight mb-2">Primary Port:</label>
                        <input value="<%= instance.Primary %>" id="primary" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-900 placeholder:text-white/20 border border-white/5" placeholder="25565">
                    </div>
                </div>
    
                <div class="mt-4">
                    <button id="createNodeBtn" type="button" class="block rounded-xl bg-white px-3 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
                </div>
            </form>
        </div>
    </div>


</main>
<script>
    document.getElementById('createNodeBtn').addEventListener('click', function() {
        const createBtn = this;
        createBtn.textContent = 'Working on it...';
        createBtn.disabled = true;
    
        const name = document.getElementById('name');
        const memory = document.getElementById('memory');
        const cpu = document.getElementById('cpu');
        const ports = document.getElementById('ports');
        const imageDropdown = document.getElementById('image');
        const primaryPort = document.getElementById('primary');
        const selectedImage = imageDropdown.options[imageDropdown.selectedIndex];
        const configFilePath = selectedImage.getAttribute('data-configfilepath');
        let configFileContent = selectedImage.getAttribute('data-configfilecontent');
    
        clearValidationErrors();
    
        let isValid = true;
    
        if (name.value.includes(' ')) {
            showError(name, 'Name must not contain spaces.');
            isValid = false;
        }
    
        if (!isPositiveInteger(memory.value)) {
            showError(memory, 'Memory must be an integer greater than 1.');
            isValid = false;
        }
    
        if (!isPositiveIntegerCpu(cpu.value)) {
            showError(cpu, 'CPU must be an integer greater than 0.');
            isValid = false;
        }
    
        const portPattern = /^(\d+:\d+)(,\d+:\d+)*$/;
        if (!ports.value.match(portPattern)) {
            showError(ports, 'Ports must be in the format "port:port,port:port".');
            isValid = false;
        }
    
        if (!primaryPort.value.match(/^\d+$/)) {
            showError(primaryPort, 'Primary port must be a valid number.');
            isValid = false;
        } else {
            configFileContent = configFileContent.replace('{{primaryPort}}', primaryPort.value);
        }
    
        if (!isValid) {
            createBtn.textContent = 'Create';
            createBtn.disabled = false;
            return;
        }
    
        const nodeData = {
            name: name.value,
            image: imageDropdown.value,
            nodeId: '<%= instance.Node.id %>',
            user: document.getElementById('user').value,
            memory: memory.value,
            cpu: cpu.value,
            ports: ports.value,
            primary: primaryPort.value,
            configFilePath: configFilePath,
            configFileContent: configFileContent
        };
    
        sendData(nodeData, createBtn);
    });
    
    function clearValidationErrors() {
        const inputs = document.querySelectorAll('.input-error');
        const messages = document.querySelectorAll('.error-message');
        inputs.forEach(input => input.classList.remove('input-error'));
        messages.forEach(msg => msg.remove());
    }
    
    function serializeParams(params) {
        return Object.keys(params)
            .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key]))
            .join('&');
        }
        
    function showError(element, message) {
        element.classList.add('input-error');
        const errorDiv = document.createElement('div');
        errorDiv.textContent = message;
        errorDiv.className = 'error-message';
        element.parentNode.insertBefore(errorDiv, element.nextSibling);
    }
    
    function isPositiveInteger(value) {
        const num = parseInt(value, 10);
        return Number.isInteger(num) && num > 1;
    }
    
    function isPositiveIntegerCpu(value) {
        const num = parseInt(value, 10);
        return Number.isInteger(num) && num > 0;
    }
    
    function sendData(nodeData, createBtn) {
        const baseUrl = '/instances/redeploy/<%= instance.Id %>';
        const queryParams = serializeParams(nodeData);
        const fullUrl = `${baseUrl}?${queryParams}`;
    
        fetch(fullUrl, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Failed to create instance');
            }
        })
        .then(data => {
        window.location.href = '../../../admin/instances?err=CREATED'
            console.log('Instance created:', data);
            createBtn.textContent = 'Create';
            createBtn.disabled = false;
        })
        .catch(error => {
            console.error('Error creating instance:', error);
            alert('Error! Instance creation failed. Check the console for more details.');
            createBtn.textContent = 'Create';
            createBtn.disabled = false;
        });
    }
    
    function handleResponse(response) {
        if (response.ok) {
            return response.json();
        }
        throw new Error('Failed to create instance');
    }
    
    function handleError(error) {
        console.error('Error creating instance:', error);
        alert('Error! Check the console for more details.');
        createBtn.textContent = 'Create';
        createBtn.disabled = false;
    }
    </script>

<%- include('../components/footer') %>