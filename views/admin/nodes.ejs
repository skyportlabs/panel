<%- include('../components/template') %>
<main id="content">
   <div class="bg-transparent">
      <div class="sm:flex sm:items-center px-8 pt-4">
         <div class="sm:flex-auto">
           <h1 class="text-base font-medium leading-6 text-white"><%= req.translations.nodes %></h1>
           <p class="mt-1 tracking-tight text-sm text-neutral-500"><%= req.translations.nodesText %></p>
         </div>
         <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
           <button id="createButton" type="button" class="block rounded-xl <%= theme['button-color'] %> px-3 py-2 text-center text-sm font-medium shadow-lg transition focus:outline focus:outline-2 focus:outline-offset-2">
            <%= req.translations.createNewNode %>
          </button>
         </div>
       </div>

      <!-- Stats -->
      <div id="stats" class="grid grid-cols-1 md:grid-cols-2 gap-6 m-8">
        <div class="bg-white/5 rounded-xl p-6 shadow-lg">
          <h2 class="text-lg font-semibold text-white mb-2">Total Nodes</h2>
          <p class="text-4xl font-bold text-white"><%= nodes.length %></p>
          <p class="text-sm text-neutral-400 mt-2">Online Nodes: <%= nodes.filter(node => node.status === 'Online').length %></p>
        </div>
        <div class="bg-white/5 rounded-xl p-6 shadow-lg">
          <h2 class="text-lg font-semibold text-white mb-2">Server Count</h2>
          <p class="text-4xl font-bold text-white"><%= Object.values(set).reduce((a, b) => a + b, 0) %></p>
          <% if (nodes.length > 0) { %>
            <p class="text-sm text-neutral-400 mt-2">Average Node Density: <%= (Object.values(set).reduce((a, b) => a + b, 0) / nodes.length).toFixed(2) %></p>
          <% } else { %>
            <p class="text-sm text-neutral-400 mt-2">No nodes available</p>
          <% } %>
        </div>
      </div>

      <% if (req.query.err == "none") { %>
      <div class="mt-6 w-full">
        <div class="rounded-xl bg-emerald-800/10 px-4 py-6 mt-8 ml-8 mb-8 mr-8">
          <div class="flex">
             <div class="flex-shrink-0 ml-1.5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mt-2 text-emerald-400">
                  <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z" clip-rule="evenodd" />
                </svg>                
             </div>
             <div class="ml-5">
                <h3 class="text-sm font-medium text-emerald-400">Success!</h3>
                <div class="text-sm text-emerald-400/50">
                   <p>The action was successfully completed.</p>
                </div>
             </div>
          </div>
       </div>
<% } %>
    <% if (req.query.err == "EDITED") { %>
      <div class="mt-6 w-full">
        <div class="rounded-xl bg-emerald-800/10 px-4 py-6 mt-8 ml-8 mb-8 mr-8">
          <div class="flex">
             <div class="flex-shrink-0 ml-1.5">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mt-2 text-emerald-400">
                  <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z" clip-rule="evenodd" />
                </svg>                
             </div>
             <div class="ml-5">
                <h3 class="text-sm font-medium text-emerald-400">Success!</h3>
                <div class="text-sm text-emerald-400/50">
                   <p>The node was edited successfully.</p>
                </div>
             </div>
          </div>
       </div>	      
      <% } %>
      <!-- Improved table -->
      <div class="overflow-hidden shadow ring-1 ring-white/5 rounded-lg m-8" id="nodeTable">
        <table class="min-w-full divide-y divide-white/10">
          <thead class="bg-white/5">
            <tr>
              <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white sm:pl-6"><%= req.translations.name %></th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white"><%= req.translations.connection %></th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white"><%= req.translations.instances %></th>
              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white"><%= req.translations.actions %></th>
            </tr>
          </thead>
          <tbody class="divide-y divide-white/5 bg-white/5">
            <% nodes.forEach(function(node) { %>
              <tr class="hover:bg-white/[0.05] transition-colors clickable-row cursor-pointer" onclick="handleRowClick(event, '/admin/node/<%= node.id %>/stats')">
                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6">
                  <div class="flex items-center">
                    <div class="mr-5">
                      <% if (node.status == "Online") { %>
                        <span class="flex h-2 w-2">
                          <span class="animate-ping absolute inline-flex h-2 w-2 rounded-full bg-emerald-400 opacity-75"></span>
                          <span class="relative inline-flex rounded-full h-2 w-2 bg-emerald-500"></span>
                        </span>
                      <% } else if (node.status == "Offline") { %>
                        <span class="flex h-2 w-2">
                          <span class="relative inline-flex rounded-full h-2 w-2 bg-neutral-500"></span>
                        </span>
                      <% } else { %>
                        <span class="flex h-2 w-2">
                          <span class="animate-ping absolute inline-flex h-2 w-2 rounded-full bg-amber-400 opacity-75"></span>
                          <span class="relative inline-flex rounded-full h-2 w-2 bg-amber-500"></span>
                        </span>
                      <% } %>
                    </div>
                    <div class="font-medium text-white"><%= node.name %></div>
                  </div>
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm">
                  <div class="flex">
                    <div class="font-mono text-sm leading-6 mt-1 mr-3 text-neutral-400"><%= node.address %><span class="text-neutral-500">:<%= node.port %></span></div>
                    <div class="mt-1 inline-flex items-center rounded-md 
                    <%= node.versionRelease ? 'bg-emerald-600/10 text-emerald-400 ring-emerald-600/20' : 'bg-red-600/10 text-red-400 ring-red-600/20' %> 
                    px-2 py-1 text-xs font-medium ring-1 ring-inset">
                      <%= node.versionRelease || 'unknown' %>
                    </div>                  
                  </div>
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-neutral-400"><%= set[node.id] || 0 %></td>
                <td class="whitespace-nowrap px-3 py-4 text-sm">
                  <div class="flex gap-3">
                    <button onclick="configure('<%= node.id %>')" type="button" class="rounded-xl <%= theme['button-color'] %> px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                      <%= req.translations.configure %>
                    </button>
                    <a href="./node/<%= node.id %>">
                      <button type="button" class="rounded-xl <%= theme['button-color'] %> px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                        <%= req.translations.edit %>
                      </button>
                    </a>
                    <button onclick="deletenode('<%= node.id %>')" type="button" class="rounded-xl bg-red-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-red-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                      <%= req.translations.remove %>
                    </button>
                      <button onclick="purgeInstances('<%= node.address %>', '<%= node.port %>', '<%= node.apiKey %>')" type="button" class="rounded-xl bg-yellow-500 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-yellow-400 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                          Purge Instances
                     </button>
                  </div>
                </td>
              </tr>
            <% }); %>
            </tbody>
          </table>
        </div>
      <div id="notification" class="fixed bottom-5 right-5 bg-white/5 text-white px-4 py-2 rounded-xl shadow-lg transform transition-all duration-300 tranneutral-y-full opacity-0">
        Command copied to clipboard!
      </div>
      </div>
      <div id="nodeForm" class="mt-6 px-8 w-full hidden">
        <div class="p-3 bg-transparent shadow-xl border border-white/5 rounded-xl overflow-hidden sm:p-6 lg:p-10 card" style="width: 800px;">
          <form>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <label for="nodeName" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.name %>:</label>
                <input id="nodeName" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="My node">
              </div>
      
              <div>
                <label for="nodeRam" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.ram %> (GB):</label>
                <input id="nodeRam" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="This is only for information purposes.">
              </div>
      
              <div>
                <label for="nodeDisk" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.disk %> (GB):</label>
                <input id="nodeDisk" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="This is only for information purposes.">
              </div>
      
              <div>
                <label for="nodeProcessor" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.cpu %>:</label>
                <input id="nodeProcessor" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="This is only for information purposes.">
              </div>
      
              <div>
                <label for="nodeAddress" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.addressIP %>:</label>
                <input id="nodeAddress" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="192.168.1.1 or my.hostnamehere.com">
              </div>
      
              <div>
                <label for="nodePort" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.deamonPort %>:</label>
                <input id="nodePort" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="3000">
              </div>
      
              <div class="col-span-2">
                <label for="tagInput" class="text-neutral-400 text-sm tracking-tight mb-2"><%= req.translations.tags %>:</label>
                <div id="tagContainer" class="flex flex-wrap gap-2 mb-2"></div>
                <input id="tagInput" class="rounded-xl focus:ring-transparent focus:border-transparent text-white text-sm mt-2 mb-6 w-full hover:bg-white/5 px-4 py-2 bg-neutral-600/20 placeholder:text-white/20 border border-white/5" placeholder="Add a tag and press Enter">
              </div>
      
              <div class="col-span-2">
                <button id="createNodeBtn" type="button" class="block rounded-xl <%= theme['button-color'] %> px-3 py-2 text-center text-sm font-medium shadow-lg transition focus:outline focus:outline-2 focus:outline-offset-2">
                  <%= req.translations.create %>
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
      
</main>
<script>

  function handleRowClick(event, url) {
    if (event.target.tagName !== 'BUTTON' && event.target.tagName !== 'A') {
      window.location = url;
    }
  }

async function deletenode(nodeId) {
  try {
    let response = await fetch('/nodes/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ nodeId })
    });

    let result = await response.json();

    if (response.ok) {
      alert('Node successfully deleted');
      window.location.reload();
    } else if (result.error === "There are instances on the node") {
      const confirmDelete = confirm('There are still instances on this node. Do you want to delete all instances and remove the node?');

      if (confirmDelete) {
        response = await fetch(`/nodes/delete?deleteinstances=true`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ nodeId })
        });

        result = await response.json();

        if (response.ok) {
          alert('Node and instances successfully deleted');
          window.location.reload();
        } 
      }
    }
  } catch (error) {
    console.error('Request failed:', error);
  }
}



document.getElementById('createButton').addEventListener('click', function() {
  var table = document.getElementById('nodeTable');
  var form = document.getElementById('nodeForm');
  var stats = document.getElementById('stats');

  if (table.classList.contains('hidden')) {
    stats.classList.remove('hidden');
    table.classList.remove('hidden');
    form.classList.add('hidden');
  } else {
    stats.classList.add('hidden');
    table.classList.add('hidden');
    form.classList.remove('hidden');
  }
});


  async function configure(nodeId) {
  const response = await fetch(`/admin/node/${nodeId}/configure-command`);
  if (!response.ok) {
    throw new Error('Failed to fetch configure command');
  }
  const data = await response.json();
  showPopup(data.configureCommand);
}

function showPopup(command) {
  const overlay = document.createElement('div');
  overlay.className = 'fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center transition-opacity duration-300 opacity-0';
  overlay.id = 'modal-overlay';

  const popup = document.createElement('div');
  popup.className = 'bg-neutral-800 text-white border border-white/5 rounded-xl shadow-xl p-6 max-w-2xl w-full mx-4 transform transition-all duration-300 scale-95 opacity-0';
  popup.innerHTML = `
    <div class="flex justify-center items-center mb-6">
      <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 48 48" class="text-emerald-500">
        <path fill="currentColor" d="M16.599,41.42L1.58,26.401c-0.774-0.774-0.774-2.028,0-2.802l4.019-4.019 c0.774-0.774,2.028-0.774,2.802,0L23.42,34.599c0.774,0.774,0.774,2.028,0,2.802l-4.019,4.019 C18.627,42.193,17.373,42.193,16.599,41.42z"/>
        <path fill="currentColor" d="M12.58,34.599L39.599,7.58c0.774-0.774,2.028-0.774,2.802,0l4.019,4.019 c0.774,0.774,0.774,2.028,0,2.802L19.401,41.42c-0.774,0.774-2.028,0.774-2.802,0l-4.019-4.019 C11.807,36.627,11.807,35.373,12.58,34.599z"/>
      </svg>
    </div>
    <h2 class="text-2xl font-bold mb-2 text-center">Token Created</h2>
    <p class="mb-4 text-neutral-300 text-center">To auto-configure your node, run the following command:</p>
    <pre class="bg-neutral-900 p-3 rounded-xl mb-4 overflow-x-auto"><code id="commandCode" class="text-emerald-500">${command}</code></pre>
    <div class="flex justify-end">
      <button id="copyBtn" class="bg-emerald-600 text-white px-4 py-2 rounded-xl mr-2 hover:bg-emerald-700 transition-colors">Copy</button>
      <button id="doneBtn" class="bg-neutral-700 text-white px-4 py-2 rounded-xl hover:bg-neutral-600 transition-colors">Close</button>
    </div>
  `;

  overlay.appendChild(popup);
  document.body.appendChild(overlay);

  // Fade in the overlay and scale up the popup
  setTimeout(() => {
    overlay.classList.remove('opacity-0');
    popup.classList.remove('scale-95', 'opacity-0');
  }, 10);

  const commandCode = document.getElementById('commandCode');
  const copyBtn = document.getElementById('copyBtn');
  const doneBtn = document.getElementById('doneBtn');

  copyBtn.addEventListener('click', function() {
    const textarea = document.createElement('textarea');
    textarea.value = commandCode.textContent;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.body.removeChild(textarea);
    
    copyBtn.textContent = 'Copied!';
    copyBtn.classList.remove('bg-emerald-600', 'hover:bg-emerald-700');
    copyBtn.classList.add('bg-neutral-600');
    
    setTimeout(() => {
      copyBtn.textContent = 'Copy';
      copyBtn.classList.remove('bg-neutral-600');
      copyBtn.classList.add('bg-emerald-600', 'hover:bg-emerald-700');
    }, 2000);
  });

  doneBtn.addEventListener('click', closePopup);

  function closePopup() {
    overlay.classList.add('opacity-0');
    popup.classList.add('scale-95', 'opacity-0');
    setTimeout(() => {
      document.body.removeChild(overlay);
    }, 300);
  }
}


  function purgeInstances(address, port, apiKey) {
    const url = `http://${address}:${port}/instances/purge/all`;
    
    fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + btoa('Skyport' + ':' + apiKey)
      }
    })
    .then(response => {
      if (response.ok) {
        alert('Instances Purged Successfully!');
      } else {
        alert('Failed to Purge Instances. Status Code: ' + response.status);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while purging instances.');
    });
  }

  function setupBadgeInput(inputId, containerId, validator) {
    const input = document.getElementById(inputId);
    const container = document.getElementById(containerId);

    function processInput() {
        const value = input.value.trim();

        const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag !== '');

        let allValid = true;
        tags.forEach(tag => {
            if (tag !== '' && (!validator || validator(tag))) {
                createBadge(tag);
            } else {
                allValid = false;
            }
        });

        if (!allValid) {
            alert('Invalid format. Ports should be like this: 8080:8080 [external:internal]. For example, if you wanted to assign 8080 to the internal port 2022, you could do: 8080:2022.');
        }

        input.value = '';
    }

    input.addEventListener('blur', function() {
        processInput();
    });
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            processInput();
        }
    });

    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const value = input.value.trim();

            const tags = value.split(',').map(tag => tag.trim()).filter(tag => tag !== '');

            let allValid = true;
            tags.forEach(tag => {
                if (tag !== '' && (!validator || validator(tag))) {
                    createBadge(tag, container, input);
                } else {
                    allValid = false;
                }
            });

            if (!allValid) {
                alert('Invalid format. Ports should be like this: 8080:8080 [external:internal]. For example, if you wanted to assign 8080 to the internal port 2022, you could do: 8080:2022.');
            }

            input.value = '';
        }
    });


    function createBadge(text, container, inputField) {
    const badge = document.createElement('span');
    badge.className = 'bg-white/5 text-neutral-300 text-xs font-medium mr-1 px-2.5 py-0.5 rounded-xl';
    badge.textContent = text;

    const removeBtn = document.createElement('button');
    removeBtn.className = 'ml-2 text-neutral-600';
    removeBtn.textContent = '×';
    removeBtn.onclick = function() {
      container.removeChild(badge);
    };

    badge.appendChild(removeBtn);
    container.appendChild(badge);
    inputField.value = '';
  }
  }

  setupBadgeInput('tagInput', 'tagContainer');

  document.getElementById('createNodeBtn').addEventListener('click', function() {
    const name = document.getElementById('nodeName').value;
    const tags = Array.from(document.getElementById('tagContainer').children).map(badge => badge.textContent.slice(0, -1).trim());
    const ram = document.getElementById('nodeRam').value;
    const disk = document.getElementById('nodeDisk').value;
    const processor = document.getElementById('nodeProcessor').value;
    const address = document.getElementById('nodeAddress').value;
    const port = document.getElementById('nodePort').value;

    const nodeData = {
      name,
      tags: tags.join(' - '),
      ram,
      disk,
      processor,
      address,
      port
    };

    fetch('/nodes/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(nodeData)
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      }
      throw new Error('Failed to create node');
    })
    .then(data => {
      console.log('Node created:', data);
      window.location.href = '../admin/nodes?err=none'
    })
    .catch(error => alert('Error creating node:', error));
  });
</script>
<%- include('../components/footer') %>
